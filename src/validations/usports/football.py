from typing import Optional

import pandas as pd

from src.utils.logger import log
from src.validations.common_validations import validate_columns, validate_school_column

EXPECTED_FOOTBALL_STANDINGS_COLUMNS = [
    "team_name",
    "games_played",
    "total_wins",
    "total_losses",
    "win_percentage",
    "total_points",
    "total_points_against",
    "conference",
]

EXPECTED_FOOTBALL_TEAM_STATS_COLUMNS = [
    "team_name",
    "games_played",
    "conference",
    "touchdowns",
    "field_goals",
    "extra_points",
    "two_point_conversions",
    "defensive_extra_points",
    "safeties",
    "points",
    "points_per_game",
    "rushing_yards",
    "passing_yards",
    "total_offense",
    "yards_per_game",
    "pass_completions",
    "pass_attempts",
    "pass_interceptions",
    "passing_yards_per_game",
    "yards_per_attempt",
    "yards_per_completion",
    "passing_touchdowns",
    "rushing_attempts",
    "rushing_yards_per_game",
    "rushing_average",
    "rushing_touchdowns",
    "total_first_downs",
    "rushing_first_downs",
    "passing_first_downs",
    "penalty_first_downs",
    "first_downs_per_game",
    "third_down_conversions_made",
    "third_down_attempts",
    "third_down_conversion_percentage",
    "fourth_down_conversions_made",
    "fourth_down_attempts",
    "fourth_down_conversion_percentage",
    "kick_return_count",
    "kick_return_yards",
    "kickoff_return_average",
    "punt_return_count",
    "punt_return_yards",
    "punt_return_average",
    "field_goal_made",
    "field_goal_attempt",
    "field_goal_percentage",
    "extra_point_made",
    "extra_point_attempt",
    "extra_point_percentage",
    "punt_count",
    "punt_yards",
    "punt_average",
    "kickoff_count",
    "kickoff_yards",
    "kickoff_average",
    "scores_made",
    "scores_attempt",
    "red_zone_percentage",
    "touchdowns_made",
    "touchdowns_attempt",
    "touchdown_percentage",
    "fumbles",
    "fumbles_lost",
    "fumble_recoveries",
    "interceptions",
    "interception_yards",
    "interception_average",
    "interception_touchdowns",
    "tackles",
    "sacks",
    "penalties",
    "penalties_per_game",
    "penalty_yards",
    "penalty_yards_per_game",
    "tackles_per_game",
    "time_of_possession",
    "home_attendance",
    "average_home_attendance",
]

EXPECTED_FOOTBALL_PLAYERS_COLUMNS = [
    "games_played",
    "pass_completions",
    "pass_attempts",
    "completion_percentage",
    "passing_yards",
    "passing_yards_per_game",
    "yards_per_attempt",
    "passing_touchdowns",
    "interceptions",
    "longest_pass",
    "passing_efficiency",
    "rushing_attempts",
    "rushing_yards",
    "rushing_yards_per_game",
    "yards_per_carry",
    "rushing_touchdowns",
    "longest_rush",
    "fumbles",
    "fumbles_lost",
    "receptions",
    "receptions_per_game",
    "receiving_yards",
    "receiving_yards_per_game",
    "yards_per_reception",
    "receiving_touchdowns",
    "longest_reception",
    "field_goals_made",
    "field_goals_attempted",
    "field_goal_percentage",
    "longest_field_goal",
    "extra_points_made",
    "extra_points_attempted",
    "extra_point_percentage",
    "kicking_points",
    "punts",
    "punting_yards",
    "yards_per_punt",
    "longest_punt",
    "punts_inside_20",
    "fair_catches",
    "touchbacks",
    "blocked_punts",
    "kick_returns",
    "kick_return_yards",
    "yards_per_kick_return",
    "kick_return_touchdowns",
    "longest_kick_return",
    "punt_returns",
    "punt_return_yards",
    "yards_per_punt_return",
    "punt_return_touchdowns",
    "longest_punt_return",
    "receiving_yards",
    "punt_return_yards",
    "kick_return_yards",
    "total_yards",
    "yards_per_game",
    "total_points",
    "points_per_game",
    "interception_return_touchdowns",
    "fumble_return_touchdowns",
    "two_point_conversions",
    "miscellaneous_touchdowns",
    "solo_tackles",
    "assisted_tackles",
    "total_tackles",
    "tackles_per_game",
    "sacks",
    "sack_yards",
    "tackles_for_loss",
    "tackles_for_loss_yards",
    "forced_fumbles",
    "fumble_recoveries",
    "fumble_recovery_yards",
    "interception_return_yards",
    "pass_breakups",
    "blocked_kicks",
]


def validate_football_data(
    standings_df: Optional[pd.DataFrame], team_stats_df: pd.DataFrame, player_stats_df: pd.DataFrame
):
    """Validate football data using exact test data column expectations"""

    if standings_df is not None and not standings_df.empty:
        validate_columns(standings_df, EXPECTED_FOOTBALL_STANDINGS_COLUMNS, "Football Standings")
        validate_school_column(standings_df, "team_name")
        log.debug("✅ Football standings validation passed")

    if team_stats_df is not None and not team_stats_df.empty:
        validate_columns(team_stats_df, EXPECTED_FOOTBALL_TEAM_STATS_COLUMNS, "Football Team Stats")
        validate_school_column(team_stats_df, "team_name")
        log.debug("✅ Football team stats validation passed")

    if player_stats_df is not None and not player_stats_df.empty:
        # Note: Football players need lastname_initials, first_name, school added
        expected_with_names = ["lastname_initials", "first_name", "school"] + EXPECTED_FOOTBALL_PLAYERS_COLUMNS
        validate_columns(player_stats_df, expected_with_names, "Football Player Stats")
        validate_school_column(player_stats_df, "school")
        log.debug("✅ Football player stats validation passed")
